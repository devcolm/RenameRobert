package ui.details;

import algorithms.RenameAlgorithmType;
import algorithms.RenameDetails;
import com.intellij.uiDesigner.core.Spacer;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import core.ApplicationData;
import core.RenameController;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import ui.RenameRobertView;

import javax.swing.*;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.Optional;

// TODO: research how to make parent window inactive when the config popups are open
public class MedalReadableDateDetailsView extends RenameRobertView {

    private static final Logger LOGGER = LogManager.getLogger();

    private JPanel contentPane;
    private JButton OKButton;
    private JTextField prefixTextField;

    public MedalReadableDateDetailsView(ApplicationData applicationData, RenameController renameController) {
        super(applicationData, renameController);
    }

    @Override
    protected void initialise() {
        setWindowDefaults(contentPane);

        this.setTitle(ApplicationData.APPLICATION_NAME);
        this.setSize(420, 300);
    }

    @Override
    protected void configureAppearance() {

    }

    @Override
    protected void configureActions() {
        OKButton.addActionListener(e -> {
            var prefix = validate(prefixTextField.getText());
            if (prefix.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "The requested filename is invalid.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            RenameDetails renameDetails = new RenameDetails(RenameAlgorithmType.MEDAL_READABLE_DATE, prefix.get());
            var renameResuts = renameController.execute(renameDetails);
            long errorCount = renameResuts.stream().filter(result -> !StringUtils.isEmpty(result.getErrorMessage())).count();

            int resultIcon = errorCount == 0 ? JOptionPane.INFORMATION_MESSAGE : JOptionPane.WARNING_MESSAGE;
            JOptionPane.showMessageDialog(this,
                    "Operation completed with (%s) issues.".formatted(errorCount),
                    "Rename Robert",
                    resultIcon);
            // TODO: list the issues in the window (limit to 5-10 lines)
            cleanup();
        });
    }

    private void cleanup() {
        renameController.getSelectedFiles().clear();
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }

    private Optional<String> validate(String prefix) {
        if (StringUtils.isWhitespace(prefix)) {
            return Optional.of(""); // we allow file names composed of just the output readable date without custom prefixes
        }
        File file = new File(applicationData.getUserDataDirectory() + File.separator + "test" + File.separator + prefix);

        boolean valid = false;
        try {
            valid = file.createNewFile();
        } catch (IOException e) {
            LOGGER.error("Cannot create file with the following filename: {}", file.getName(), e);
        }

        if (valid) {
            file.delete();
            return Optional.of(prefix);
        }

        return Optional.empty();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new FormLayout("fill:d:grow", "center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:d:grow"));
        OKButton = new JButton();
        OKButton.setText("OK");
        OKButton.setVerticalAlignment(0);
        CellConstraints cc = new CellConstraints();
        contentPane.add(OKButton, cc.xy(1, 17, CellConstraints.DEFAULT, CellConstraints.BOTTOM));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, cc.xy(1, 15, CellConstraints.DEFAULT, CellConstraints.FILL));
        prefixTextField = new JTextField();
        contentPane.add(prefixTextField, cc.xy(1, 7, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label1 = new JLabel();
        label1.setHorizontalAlignment(0);
        label1.setText("What every renamed file will begin with");
        contentPane.add(label1, cc.xy(1, 5));
        final JLabel label2 = new JLabel();
        label2.setHorizontalAlignment(0);
        label2.setHorizontalTextPosition(0);
        label2.setText("[[ This customization will be available in future releases ]]");
        contentPane.add(label2, cc.xy(1, 13));
        final JLabel label3 = new JLabel();
        label3.setHorizontalAlignment(0);
        label3.setOpaque(false);
        label3.setText("Date Format");
        contentPane.add(label3, cc.xy(1, 9));
        final JLabel label4 = new JLabel();
        label4.setHorizontalAlignment(0);
        label4.setText("Name prefix");
        contentPane.add(label4, cc.xy(1, 1));
        final JSeparator separator1 = new JSeparator();
        contentPane.add(separator1, cc.xy(1, 3, CellConstraints.FILL, CellConstraints.FILL));
        final JSeparator separator2 = new JSeparator();
        contentPane.add(separator2, cc.xy(1, 11, CellConstraints.FILL, CellConstraints.FILL));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
