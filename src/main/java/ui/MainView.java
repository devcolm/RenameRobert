package ui;

import algorithms.RenameAlgorithmType;
import core.ApplicationData;
import core.RenameController;
import org.apache.commons.lang3.NotImplementedException;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import ui.details.MedalReadableDateDetailsView;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Arrays;

import static core.ApplicationData.DEFAULT_BROWSE_DIRECTORY;

public class MainView extends RenameRobertView {

    private static final Logger LOGGER = LogManager.getLogger();

    private JPanel contentPane;
    private JButton renameFilesButton;
    private JButton browseButton;
    private JLabel pictureLabel;
    private JLabel selectFilesLabel;
    private JLabel selectAlgorithmLabel;
    private JList algorithmList;
    private JLabel selectedFilesInfoField;

    // TODO: Guice
    private final JFileChooser fileChooser = new JFileChooser();

    public MainView(ApplicationData applicationData, RenameController renameController) {
        super(applicationData, renameController);
    }

    @Override
    protected void initialise() {
        setWindowDefaults(contentPane);
        this.setTitle(ApplicationData.APPLICATION_NAME);
        this.setSize(420, 500);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.algorithmList.setListData(RenameAlgorithmType.values());
        this.algorithmList.setSelectedIndex(0);
    }

    @Override
    protected void configureAppearance() {
        setFonts();
        setIcons();
    }

    @Override
    protected void configureActions() {
        setFileChooser();
        addListeners();
    }

    private void setFonts() {
        selectFilesLabel.setFont(new Font("Arial", Font.BOLD, 16));
        selectAlgorithmLabel.setFont(new Font("Arial", Font.BOLD, 16));
    }

    private void setIcons() {
        BufferedImage image = applicationData.getImage();
        if (image == null) {
            pictureLabel.setText("Robert is working from home today.");
            return;
        }

        ImageIcon robertIcon = new ImageIcon();
        robertIcon.setImage(image);
        pictureLabel.setIcon(robertIcon);

        this.setIconImage(image);
    }

    private void setFileChooser() {
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setCurrentDirectory(new File(
                ObjectUtils.firstNonNull(applicationData.getRecentDirectory(), DEFAULT_BROWSE_DIRECTORY)));
    }

    // TODO: Updating MainView select files should happen after an event (selected by file chooser, operation completed)
    private void addListeners() {
        browseButton.addActionListener(e -> {
            fileChooser.showOpenDialog(browseButton);

            var files = Arrays.asList(fileChooser.getSelectedFiles());
            renameController.getSelectedFiles().addAll(files);
            applicationData.setRecentDirectory(fileChooser.getCurrentDirectory().getPath());
            selectedFilesInfoField.setText("[%s] files selected.".formatted(files.size()));

            boolean renameEnabled = !files.isEmpty();
            renameFilesButton.setEnabled(renameEnabled);
            LOGGER.info("Selected ({}) files to rename.", files.size());
        });

        renameFilesButton.addActionListener(e -> {
            // Opens configuration window for the algorithm selected
            RenameAlgorithmType selectedType = (RenameAlgorithmType) algorithmList.getSelectedValue();
            RenameRobertView configurationView = getConfigurationView(selectedType);
            configurationView.open();
        });

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                applicationData.save();
            }
        });
    }

    private RenameRobertView getConfigurationView(RenameAlgorithmType type) {
        return switch (type) {
            case MEDAL_READABLE_DATE -> new MedalReadableDateDetailsView(applicationData, renameController);
            case ENUMERATION -> throw new NotImplementedException("TODO");
        };
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.setRequestFocusEnabled(false);
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        contentPane.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        renameFilesButton = new JButton();
        renameFilesButton.setEnabled(false);
        renameFilesButton.setText("Rename files");
        contentPane.add(renameFilesButton, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(349, 310), null, 0, false));
        pictureLabel = new JLabel();
        pictureLabel.setHorizontalAlignment(0);
        pictureLabel.setHorizontalTextPosition(0);
        pictureLabel.setText("");
        pictureLabel.setToolTipText("Yo! Don't worry, I've got your back with the mundane rename tasks!");
        panel1.add(pictureLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(349, 310), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        browseButton = new JButton();
        browseButton.setText("Browse");
        panel2.add(browseButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        selectedFilesInfoField = new JLabel();
        selectedFilesInfoField.setText("[0] files selected");
        panel2.add(selectedFilesInfoField, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        algorithmList = new JList();
        panel3.add(algorithmList, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        selectAlgorithmLabel = new JLabel();
        selectAlgorithmLabel.setText("Select rename algorithm");
        contentPane.add(selectAlgorithmLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        selectFilesLabel = new JLabel();
        selectFilesLabel.setText("Select files to rename");
        contentPane.add(selectFilesLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
